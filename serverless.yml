# serverless.yml
service: acme
frameworkVersion: '^2.57.0'

provider:
  name: aws
  lambdaHashingVersion: 20201221
  stage: ${{env:STAGE_NAME, 'prod'}}
  region: eu-west-1
  role: LambdaIAMRole
  deploymentBucket:
    name: gc-bin
  stackTags: # Optional CF stack tags
    Owner: giulio.calzolari@cloudreach.com
    Purpose: acme-gw

package:
  patterns:
    - "!.serverless/**"
    - "!.git**"


functions:
  apigw:
    handler: api.lambda_handler
    runtime: python3.9
    memorySize: "128"
    timeout: 30 # ApiGW has a built-in timeout of 30 sec
    environment:
      XTOKEN: "${{ssm:/timecard/prod/apitoken}}"
      SFN_ARN:
        Fn::Join:
            - ''
            -
              - 'arn:aws:states:'
              - Ref: 'AWS::Region'
              - ":"
              - Ref: 'AWS::AccountId'
              - ':stateMachine:acme-gw-sfn-${opt:stage}'
    events:
      - http:
          path: /get_certificate
          method: post

      - http:
          path: /get_certificate_worker
          method: get

  sfn:
    handler: sfn.lambda_handler
    runtime: python3.9
    memorySize: "512"
    timeout: 900
    environment:
      SFN_ARN:
        Fn::Join:
            - ''
            -
              - 'arn:aws:states:'
              - Ref: 'AWS::Region'
              - ":"
              - Ref: 'AWS::AccountId'
              - ':stateMachine:acme-gw-sfn-${opt:stage}'
      S3_BUCKET:
        Fn::Join:
            - '-'
            -
              - 'acme'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'storage'


resources:
  Description: ACME Gateway
  Resources:
    ApigwLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "90"

    SfnLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "90"


    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName:
          Fn::Join:
            - '-'
            -
              - 'acme'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'storage'
        PublicAccessBlockConfiguration:
            BlockPublicAcls : true
            BlockPublicPolicy : true
            IgnorePublicAcls : true
            RestrictPublicBuckets : true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    LambdaIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "acme_gw_${opt:stage}"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: S3
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource:
                    - '*'

          - PolicyName: SFNExecution
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                    - states:StopExecution
                    - states:ListExecutions
                  Resource:
                    - '*'

          - PolicyName: Route53
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - route53:*
                  Resource:
                    - '*'

          - PolicyName: ACM
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - acm:*
                  Resource:
                    - '*'

          - PolicyName: CloudwatchLog
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:Describe*
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
    StatesExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "acmw_gw_sfn_${opt:stage}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'Fn::Join':
                    - '.'
                    -
                      - 'states'
                      - Ref: 'AWS::Region'
                      - 'amazonaws.com'
              Action: "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: StatesExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"

    AcmeWorker:
      Type: 'AWS::StepFunctions::StateMachine'
      Properties:
        RoleArn:
          Fn::GetAtt: [ StatesExecutionRole, Arn ]
        StateMachineName: "acme-gw-sfn-${opt:stage}"
        DefinitionString:
          Fn::Sub:
            |-
              {
                "Comment": "Acme Worker",
                "StartAt": "Get certs",
                "States": {
                  "Get certs": {
                    "Type": "Task",
                    "Resource": "${SfnLambdaFunction.Arn}",
                    "InputPath": "$",
                    "ResultPath": "$",
                    "TimeoutSeconds": 180,
                    "Next": "Complete",
                    "Retry": [
                      {
                        "ErrorEquals": ["States.ALL"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 2.0,
                        "MaxAttempts": 2
                      }
                    ],
                    "Catch": [
                      {
                        "ErrorEquals": ["States.ALL"],
                        "ResultPath": "$.errorMsg",
                        "Next": "Job Failed"
                      }
                    ]
                  },
                  "Job Failed": {
                    "Type": "Fail",
                    "Cause": "Job Failed",
                    "Error": "$.errorMsg"
                  },
                  "Complete": {
                    "Type": "Pass",
                    "End": true
                  }
                }
              }